<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd">

    <!-- base-package로 시작하는 모든 패키지를 스캔 대상에 포함. -->
   <context:component-scan base-package="com.springbook.biz"></context:component-scan>

  	<!-- 어노테이션 기반 AOP 설정 -->
	<aop:aspectj-autoproxy></aop:aspectj-autoproxy>
	<!-- 선언만 하면 스프링 컨테이너는 AOP관련 어노테이션들을 인식하고 용도에 맞게 처리 -->
    
    
    <!-- 프로퍼티 파일의 위치 등록 -->
    <context:property-placeholder location="classpath:config/database.properties" />
    
    <!-- DataSource 설정 -->
    <!-- Properties파일에 설정된 프로퍼티들을 이용하여 DataSource를 설정. -->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
          <property name="driverClassName" value="${jdbc.driver}" /> 
          <property name="url" value="${jdbc.url}" />
          <property name="username" value="${jdbc.username}" />
          <property name="password" value="${jdbc.password}" />
    </bean> 
    
    
    <!-- jdbcTemplate클래스 bean등록 -->
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
    	<property name="dataSource" ref="dataSource" /> <!-- 반드시  JdbcTemplate객체에 DataSource객체를 의존성 주입해야함. -->
    </bean>

	<!-- Spring과 Mybatis 연동 설정 -->
    <!-- SqlSessionFactoryBean객체로부터 DB 연동 구현에 사용할 SqlSession객체를 얻을 수 있다. -->  
    <!-- SqlSessionFactoryBean객체가 SqlSession객체를 생산하려면, 반드시 DataSource와 SQL Mapper정보가 필요.
    	 앞에 등록된 dataSource와  SQL Mapper가 등록된 sql-map-config.xml파일(Mybatis 메인 환경설정 파일)을 Setter인젝션으로 참조. -->  
	<bean id="sessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<property name="configLocation" value="classpath:sql-map-config.xml"></property>
	</bean>
	
	<!-- SqlSessionTemplate클래스에는 Setter메소드가 없어서 Setter인젝션할 수 없음.
	따라서 생성자 메소드를 이용한 Constructor주입으로 처리. -->
	<bean class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg ref="sessionFactory"></constructor-arg>
	</bean>
	
    <!-- transation 설정 (DataSourceTransationManager(트랜잭션 관리자)클래스를 bean등록 )-->
    <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
    	<property name="dataSource" ref="dataSource"></property>
    </bean>
    
    <!-- 트랜잭션 관리 기능의 어드바이스는  <tx:advice>엘리먼트를 사용하여 설정.(tx네임스페이스 추가) -->
    <!-- 기존 어드바이스와 달리 우리가 직접 구현하지 않으며, 스프링 컨테이너가 이 설정을 참조하여 자동으로 생성.-->
    <tx:advice id="txAdvice" transaction-manager="txManager"> <!-- 어드바이스 객체가 사용할 트랜잭션 관리자를 지정 -->
    	<tx:attributes>
    		<!-- 트랜잭션을 적용할 메소드를 지정 -->
    		<tx:method name="get" read-only="true"/> <!-- 읽기 전용으로 처리. 트랜잭션 관리 대상에서 제외 -->
    		<tx:method name="*"/>
    	</tx:attributes>
    </tx:advice>
    
    <!-- AOP설정을 통한 트랜잭션 적용 -->
    <aop:config>
    	<aop:pointcut id="txPointcut" expression="execution(* com.springbook.biz..*(..))" />
    	
    	<aop:advisor pointcut-ref="txPointcut" advice-ref="txAdvice"/>
    </aop:config>
    
    
    
</beans>


